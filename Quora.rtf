{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import requests\
from bs4 import BeautifulSoup\
from textblob import TextBlob\
import matplotlib.pyplot as plt\
from wordcloud import WordCloud\
\
# Function to scrape Quora pages and extract text\
def scrape_quora(query, num_pages=5):\
    base_url = "https://www.quora.com/search?q="\
    all_text = ""\
\
    for page in range(1, num_pages + 1):\
        url = f"\{base_url\}\{query\}&page=\{page\}"\
        response = requests.get(url)\
\
        if response.status_code == 200:\
            soup = BeautifulSoup(response.text, 'html.parser')\
            answers = soup.find_all('div', class_='q-box qu-mb--tiny')\
\
            for answer in answers:\
                text = answer.get_text(strip=True)\
                all_text += text + " "\
\
    return all_text\
\
# Function to perform sentiment analysis and classify as positive, negative, or neutral\
def analyze_sentiment(text):\
    blob = TextBlob(text)\
    polarity = blob.sentiment.polarity\
\
    if polarity > 0:\
        return 'Positive'\
    elif polarity < 0:\
        return 'Negative'\
    else:\
        return 'Neutral'\
\
# Function to plot sentiment analysis results\
def plot_sentiment(sentiment_counts):\
    labels = list(sentiment_counts.keys())\
    counts = list(sentiment_counts.values())\
\
    plt.bar(labels, counts, color=['green', 'red', 'yellow'])\
    plt.title('Quora Sentiment Analysis for OpenAI')\
    plt.xlabel('Sentiment')\
    plt.ylabel('Number of Answers')\
    plt.show()\
\
# Function to generate word cloud visualization\
def generate_wordcloud(text):\
    wordcloud = WordCloud(width=800, height=400, random_state=21, max_font_size=110, background_color='white').generate(text)\
    plt.figure(figsize=(10, 7))\
    plt.imshow(wordcloud, interpolation="bilinear")\
    plt.axis('off')\
    plt.show()\
\
# Example usage\
query_to_search = "OpenAI"\
quora_text = scrape_quora(query_to_search)\
quora_sentiments = [analyze_sentiment(answer) for answer in quora_text.split('.')]\
sentiment_counts = \{'Positive': quora_sentiments.count('Positive'), 'Negative': quora_sentiments.count('Negative'), 'Neutral': quora_sentiments.count('Neutral')\}\
plot_sentiment(sentiment_counts)\
generate_wordcloud(quora_text)\
}