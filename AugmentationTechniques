import random
from nltk.corpus import wordnet

# Function for synonym replacement
def synonym_replacement(words, n=1):
    new_words = words.copy()
    random_word_list = list(set([word for word in words if word not in stop_words]))
    random.shuffle(random_word_list)
    num_replaced = 0
    for random_word in random_word_list:
        synonyms = get_synonyms(random_word)
        if len(synonyms) >= 1:
            synonym = random.choice(list(synonyms))
            new_words = [synonym if word == random_word else word for word in new_words]
            num_replaced += 1
        if num_replaced >= n:
            break
    return new_words

# Function to get synonyms from WordNet
def get_synonyms(word):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name())
    return synonyms

# Apply data augmentation to text
def augment_text(text, num_augmented=5):
    words = text.split()
    augmented_texts = [text]
    
    for _ in range(num_augmented):
        augmented_words = synonym_replacement(words)
        augmented_texts.append(' '.join(augmented_words))

    return augmented_texts

# Example usage
augmented_quora_text = augment_text(quora_text)
sentiment_counts = {'Positive': 0, 'Negative': 0, 'Neutral': 0}

for augmented_text in augmented_quora_text:
    sentiment = analyze_sentiment(augmented_text)
    sentiment_counts[sentiment] += 1

plot_sentiment(sentiment_counts)
